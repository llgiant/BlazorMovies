@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService
@* Был добавлено череp NuGet + в классе program добавлен в сервисы
    build.services.AddFileReaderService(options => options.InitializeOnFirstCall = true);*@
<div>
    <label>@Label</label>
    <div>
        <input type="file" @ref="inputElement" @onchange="ImageFileSelected" accept=".jpg,.jpeg,.png" />
    </div>
</div>
@* отображение картинки в браузере пользователя *@
<div>
    @* Image in Base64 from byte array*@
    @if (imageBase64 != null)
    {
        <div>
            <div style="margin:10px">
                <img src="data:image/jpeg;base64, @imageBase64" style="width:400px" />
            </div>
        </div>
    }

    @* Image from URL from DB*@
    @if (ImageURL != null)
    {
        <div>
            <div style="margin:10px">
                <img src="@ImageURL" style="width:400px" />
            </div>
        </div>
    }

</div>
@code {
    [Parameter] public string Label { set; get; } = "Image";
    [Parameter] public string ImageURL { set; get; }
    [Parameter] public EventCallback<string> OnSelectedImage { set; get; }
    private string imageBase64;
    ElementReference inputElement;

    //ImageFileSelected method reads file from user computer amd converts it to base64 and saves it into imageBase64
    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {
            //представление изображения в памяти
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var imageBytes = new byte[memoryStream.Length];
                memoryStream.Read(imageBytes, 0, (int)memoryStream.Length);
                imageBase64 = Convert.ToBase64String(imageBytes);
                await OnSelectedImage.InvokeAsync(imageBase64);
                // чтобы не отоброжать 2 изображения
                // ImageURL = null;
                StateHasChanged();
            }
        }
    }
}
