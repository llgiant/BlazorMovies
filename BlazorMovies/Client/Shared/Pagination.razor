<h3>Pagination</h3>

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectedPageInternal(link))"
                style="cursor:pointer;"
                class="page-item @(link.Enabled?null:"disabled") @(link.Active? "active":null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>


@code
{
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalAmountPages { get; set; }
    [Parameter] public int Radius { get; set; } = 2;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links;

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage) //if the user clic on
        {
            return;
        }

        if (!link.Enabled) //if set link is not enabled not going to do anything
        {
            return;
        }
        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    //method for generating the links
    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

        for (int i = 1; i <= TotalAmountPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }
        var isNextPageLinkEnabled = CurrentPage != TotalAmountPages;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));

    }

    //this internal class incapsulates all the information related to a specific link
    class LinkModel
    {
        public LinkModel(int page)
        : this(page, true) { }
        public LinkModel(int page, bool enabled)
        : this(page, enabled, page.ToString()) { }
        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }//Displayed text in the bottom f.e.: |Previous| 1 | 2 | 3 | Next|
        public int Page { get; set; }//the page to witch the button is linking to
        public bool Enabled { get; set; } = true; // means that the button isn't disabled
        public bool Active { get; set; } = false;// the current page in witch we are in
    }
}


